{"ast":null,"code":"import _regeneratorRuntime from \"E:/Nextjs/next-cy/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(postOrder),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(SlideSaga);\n\nimport { put, takeLatest, all, call } from \"redux-saga/effects\";\nimport Request from \"../utils/request\";\nimport { postOrderSuccess, postOrderError } from \"../actions/order\";\nimport { POST_ORDER } from \"../contants/order\";\nexport function postOrder(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function postOrder$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(Request, url, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json, text-plain, */*\",\n              \"X-Requested-With\": \"XMLHttpRequest\"\n            },\n            credentials: \"same-origin\",\n            body: JSON.stringify(orderVal)\n          });\n\n        case 2:\n          response = _context.sent;\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport default function SlideSaga() {\n  return _regeneratorRuntime.wrap(function SlideSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.t0 = all;\n          _context2.next = 3;\n          return takeLatest(POST_ORDER, postOrder);\n\n        case 3:\n          _context2.t1 = _context2.sent;\n          _context2.t2 = [_context2.t1];\n          _context2.next = 7;\n          return (0, _context2.t0)(_context2.t2);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n_c = SlideSaga;\n\nvar _c;\n\n$RefreshReg$(_c, \"SlideSaga\");","map":{"version":3,"sources":["E:/Nextjs/next-cy/src/sagas/order.js"],"names":["postOrder","SlideSaga","put","takeLatest","all","call","Request","postOrderSuccess","postOrderError","POST_ORDER","action","url","method","headers","Accept","credentials","body","JSON","stringify","orderVal","response"],"mappings":";;oDAWiBA,S;qDAoBQC,S;;AA/BzB,SAASC,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,SACIC,gBADJ,EAEIC,cAFJ,QAGO,kBAHP;AAKA,SAASC,UAAT,QAA0B,mBAA1B;AAEA,OAAO,SAAUT,SAAV,CAAoBU,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQc,iBAAML,IAAI,CAACC,OAAD,EAAUK,GAAV,EAAe;AACtCC,YAAAA,MAAM,EAAE,MAD8B;AAEtCC,YAAAA,OAAO,EAAE;AACL,8BAAgB,kBADX;AAELC,cAAAA,MAAM,EAAE,mCAFH;AAGL,kCAAoB;AAHf,aAF6B;AAOtCC,YAAAA,WAAW,EAAE,aAPyB;AAQtCC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,QAAf;AARgC,WAAf,CAAV;;AARd;AAQGC,UAAAA,QARH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBP,eAAe,SAAUnB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA,yBACLG,GADK;AAAA;AAEP,iBAAMD,UAAU,CAACM,UAAD,EAAaT,SAAb,CAAhB;;AAFO;AAAA;AAAA;AAAA;AACX;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;KAAUC,S","sourcesContent":["import { put, takeLatest, all, call } from \"redux-saga/effects\";\r\n\r\nimport Request from \"../utils/request\";\r\n\r\nimport {\r\n    postOrderSuccess,\r\n    postOrderError,\r\n} from \"../actions/order\";\r\n\r\nimport { POST_ORDER} from \"../contants/order\";\r\n\r\nexport function* postOrder(action) {\r\n    // const url = `api/banners/get?active=1&id_website=4&&page_type=${action.offset.page_type}`;\r\n    // try {\r\n    //     const response = yield call(Request, url);\r\n    //     yield put(postOrderSuccess(response));\r\n    // } catch (error) {\r\n    //     yield put(postOrderError(error.message));\r\n    // }\r\n    const response = yield call(Request, url, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json, text-plain, */*\",\r\n            \"X-Requested-With\": \"XMLHttpRequest\",\r\n        },\r\n        credentials: \"same-origin\",\r\n        body: JSON.stringify(orderVal),\r\n    });\r\n}\r\n\r\nexport default function* SlideSaga() {\r\n    yield all([\r\n        yield takeLatest(POST_ORDER, postOrder),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}