{"ast":null,"code":"export const calcDate = (startTime, endTime) => {\n  const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  var checkStart = Math.abs(new Date() - new Date(startTime));\n\n  if (checkStart < 0) {\n    const dd = String(new Date(startTime).getDate()).padStart(2, \"0\");\n    const mm = monthNames[String(new Date(startTime).getMonth())];\n    const yyyy = new Date(startTime).getFullYear();\n    const hour = new Date(startTime).getHours();\n    const minus = new Date(startTime).getMinutes();\n    return `Early start <br/> at ${hour}:${minus} </br/> on ${dd}, ${mm} ${yyyy}`;\n  }\n\n  var checkEnd = Math.abs(new Date() - new Date(endTime));\n\n  if (checkEnd > 0) {\n    const dd = String(new Date(endTime).getDate()).padStart(2, \"0\");\n    const mm = monthNames[String(new Date(endTime).getMonth())];\n    const yyyy = new Date(endTime).getFullYear();\n    const hour = new Date(endTime).getHours();\n    const minus = new Date(endTime).getMinutes();\n    return `Ended <br/> at ${hour}:${minus} </br/> on ${dd}, ${mm} ${yyyy}`;\n  }\n};\nexport const formatDate = time => {\n  const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const dd = String(new Date(time).getDate()).padStart(2, \"0\");\n  const mm = monthNames[String(new Date(time).getMonth())];\n  const yyyy = new Date(time).getFullYear();\n  return `${dd}, ${mm} ${yyyy}`;\n};\nexport const formatMoney = money => {\n  return new Intl.NumberFormat(\"vi-VN\", {\n    style: \"currency\",\n    currency: \"VND\",\n    currencyDisplay: \"symbol\",\n    minimumFractionDigits: 0\n  }).format(parseFloat(money));\n};\nexport const keywords = str => {\n  return str.split(\" \");\n};","map":{"version":3,"sources":["E:/Nextjs/next-cy/src/lib/helper.js"],"names":["calcDate","startTime","endTime","monthNames","checkStart","Math","abs","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","hour","getHours","minus","getMinutes","checkEnd","formatDate","time","formatMoney","money","Intl","NumberFormat","style","currency","currencyDisplay","minimumFractionDigits","format","parseFloat","keywords","str","split"],"mappings":"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","sourcesContent":["export const calcDate = (startTime, endTime) => {\r\n  const monthNames = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n  var checkStart = Math.abs(new Date() - new Date(startTime));\r\n  if (checkStart < 0) {\r\n    const dd = String(new Date(startTime).getDate()).padStart(2, \"0\");\r\n    const mm = monthNames[String(new Date(startTime).getMonth())];\r\n    const yyyy = new Date(startTime).getFullYear();\r\n    const hour = new Date(startTime).getHours();\r\n    const minus = new Date(startTime).getMinutes();\r\n    return `Early start <br/> at ${hour}:${minus} </br/> on ${dd}, ${mm} ${yyyy}`;\r\n  }\r\n\r\n  var checkEnd = Math.abs(new Date() - new Date(endTime));\r\n  if (checkEnd > 0) {\r\n    const dd = String(new Date(endTime).getDate()).padStart(2, \"0\");\r\n    const mm = monthNames[String(new Date(endTime).getMonth())];\r\n    const yyyy = new Date(endTime).getFullYear();\r\n    const hour = new Date(endTime).getHours();\r\n    const minus = new Date(endTime).getMinutes();\r\n    return `Ended <br/> at ${hour}:${minus} </br/> on ${dd}, ${mm} ${yyyy}`;\r\n  }\r\n};\r\n\r\nexport const formatDate = (time) => {\r\n  const monthNames = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n  const dd = String(new Date(time).getDate()).padStart(2, \"0\");\r\n  const mm = monthNames[String(new Date(time).getMonth())];\r\n  const yyyy = new Date(time).getFullYear();\r\n  return `${dd}, ${mm} ${yyyy}`;\r\n};\r\n\r\nexport const formatMoney = (money) => {\r\n  return new Intl.NumberFormat(\"vi-VN\", {\r\n    style: \"currency\",\r\n    currency: \"VND\",\r\n    currencyDisplay: \"symbol\",\r\n    minimumFractionDigits: 0,\r\n  }).format(parseFloat(money));\r\n};\r\n\r\nexport const keywords = (str) => {\r\n  return str.split(\" \");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}